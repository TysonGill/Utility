<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>Utility</name>
  </assembly>
  <members>
    <member name="T:Utility.frmUsers">
      <summary>
This form is used to add users to an application and assign roles.</summary>
    </member>
    <member name="T:Utility.frmEditRow">
      <summary>
A general form that can be used to edit a DataRow</summary>
    </member>
    <member name="T:Utility.clsBusiness">
      <summary>
General library for eligibility verification.</summary>
      <remarks>
Note that this class requires AppShareCon, SQLCon, MHSCon, MHSConLong, and DMSCon to be present in the db.Connections collection.</remarks>
    </member>
    <member name="M:Utility.clsBusiness.GetUserRoles(System.String)">
      <summary>
Return the application roles for the current user.</summary>
      <remarks>
Uses Application.ProductName. Requires an AppShareCon connection.</remarks>
      <returns>
A datatable of user roles.</returns>
      <param name="AppName">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.clsBusiness.GetMemberName(System.String)">
      <summary>
Return the name of a member.</summary>
      <remarks>
Can be used to see if a Member ID is valid. Requires an MHSCon connection.</remarks>
      <returns>
The name of the member.</returns>
      <param name="MemberID">
Member ID to search for.</param>
    </member>
    <member name="M:Utility.clsBusiness.GetMemberData(System.String,System.Boolean)">
      <summary>
Returns current data for a given member.</summary>
      <remarks>
Requires an MHSCon connection.</remarks>
      <returns>
A DataRow with the member information.</returns>
      <param name="MemberID">
The Member for whom to retrieve data.</param>
      <param name="ReturnEmpty">
Set to true to return an empty datarow if member is not found, otherwise it returns Nothing.</param>
    </member>
    <member name="M:Utility.clsBusiness.GetRecertDate(System.Data.DataRow)">
      <summary>
Returns the most recent recert date for a member.</summary>
      <remarks>
Requires an SQLCon connection.</remarks>
      <returns>
The recert date.</returns>
      <param name="MemberData">
The MemberData for the member to check.</param>
    </member>
    <member name="M:Utility.clsBusiness.GetHRAStatus(System.Data.DataRow)">
      <summary>
Returns the most recent HRA Status for a member.</summary>
      <remarks>
Requires an AppShareCon connection.</remarks>
      <returns>
The HRA Status Code.</returns>
      <param name="MemberData">
The MemberData for the member to check.</param>
    </member>
    <member name="M:Utility.clsBusiness.GetClaimTypes">
      <summary>
Returns a list of Claim Types.</summary>
      <remarks>
Requires an MHSCon connection.</remarks>
      <returns>
A datatable of categories.</returns>
    </member>
    <member name="M:Utility.clsBusiness.GetLibrary(System.String)">
      <summary>
Returns the DWH library for a company.</summary>
      <returns>
The DWH library name.</returns>
      <param name="CompNo">
The two digit company number ('01', '05', '20').</param>
    </member>
    <member name="M:Utility.clsBusiness.GetPharmTable(System.String)">
      <summary>
Returns the DWH pharmacy table for a company.</summary>
      <returns>
The DWH pharmacy table name.</returns>
      <param name="CompNo">
The two digit company number ('01', '05', '20').</param>
    </member>
    <member name="M:Utility.clsBusiness.IsEligible(System.String)">
      <summary>
Returns True if member is currently eligible.</summary>
      <remarks>
Requires an MHSCon connection.</remarks>
      <returns>
True if currently eligible, False if Future Eligible or Disenrolled.</returns>
      <param name="MemberID">
The Member to check.</param>
    </member>
    <member name="M:Utility.clsBusiness.GetCCMSStatus(System.String,System.String)">
      <summary>
Checks the CCMS Case Status for a given member and partner company.</summary>
      <remarks>
Requires an CCMSCon connection.</remarks>
      <returns>
"Open" if a case is currently opened.</returns>
      <param name="CompanyCode">
The CCMS name of the partner company.</param>
      <param name="MemberID">
The Member ID to check.</param>
    </member>
    <member name="M:Utility.clsBusiness.MemberExists(System.String)">
      <summary>
Returns True if member exists in MHS.</summary>
      <remarks>
Requires an MHSCon connection.</remarks>
      <returns>
True if found.</returns>
      <param name="MemberID">
The Member to check.</param>
    </member>
    <member name="T:Utility.clsNetworking">
      <summary>
General library for networking routines.</summary>
    </member>
    <member name="M:Utility.clsNetworking.MacessFolder(System.String)">
      <summary>
Opens an instance of Macess to a given folder.</summary>
      <param name="FolderID">
The folder ID to open.</param>
    </member>
    <member name="M:Utility.clsNetworking.MacessDocument(System.String)">
      <summary>
Opens an instance of Macess to a given document.</summary>
      <param name="DocumentID">
The document ID to open.</param>
    </member>
    <member name="M:Utility.clsNetworking.HostNameGet">
      <summary>
Returns the DNS name of the host machine.</summary>
    </member>
    <member name="M:Utility.clsNetworking.HostAddressGet">
      <summary>
Returns the IP Address for the most machine.</summary>
    </member>
    <member name="M:Utility.clsNetworking.GetUser">
      <summary>
Returns the user name for the current windows login.</summary>
      <remarks>
Requires that application be configured to use Windows Authentication and also a connection to the HR database called HRCon in the Connections collection.</remarks>
      <returns>
The user name.</returns>
    </member>
    <member name="M:Utility.clsNetworking.GetUserInfo(Utility.clsDataQuery,System.String)">
      <summary>
Returns detailed user information.</summary>
      <remarks>
Requires that application be configured to use Windows Authentication. Note that multiple records can be returned if the person has multiple phone numbers.</remarks>
      <returns>
A datatable of user information.</returns>
      <param name="dqHR">
A DataQuery object pointing to the HR database.</param>
      <param name="UserName">
The windows system name or the current user if omitted.</param>
    </member>
    <member name="M:Utility.clsNetworking.IsUserInGroupList(System.String,System.String)">
      <summary>
Checks if a user is in any of a list of Active Directory user groups</summary>
      <returns>
Returns true if a user is in any group in GroupList</returns>
      <param name="GroupList">
A comma delimited list of Active Directory groups</param>
      <param name="UserName">
The optional Windows login username</param>
    </member>
    <member name="M:Utility.clsNetworking.GetActiveDirectoryGroups(System.String)">
      <summary>
Returns a list of users to which a member is assigned in Active Directory</summary>
      <returns>
A comma delimited string of user groups</returns>
      <param name="UserName">
The optional Windows login username to check</param>
    </member>
    <member name="M:Utility.clsNetworking.ToUncPath(System.String)">
      <summary>
Converts a local (mapped) path to a UNC path.</summary>
      <remarks>
It will return the original path if the conversion cannot be performed.</remarks>
      <returns>
The UNC path.</returns>
      <param name="LocalPath">
The local path to convert, must start with drive letter followed by a colon.</param>
    </member>
    <member name="M:Utility.clsNetworking.IsURL(System.String)">
      <summary>
Check if a path point to a file or a URL.</summary>
      <returns>
Returns True if Path is a URL.</returns>
      <param name="Path">
The URL or file path.</param>
    </member>
    <member name="M:Utility.clsNetworking.GetImage(System.String)">
      <summary>
Returns an image pointed to by a URL or File Path.</summary>
      <returns>
The Image.</returns>
      <param name="Path">
The URL or file path to the image.</param>
    </member>
    <member name="M:Utility.clsNetworking.GetWebImage(System.String)">
      <summary>
Returns an image pointed to by a URL.</summary>
      <returns>
The Image.</returns>
      <param name="ImageURL">
The URL to the image on the web.</param>
    </member>
    <member name="M:Utility.clsNetworking.GetFileImage(System.String)">
      <summary>
Returns an image pointed to by a file path.</summary>
      <returns>
The Image.</returns>
      <param name="ImagePath">
The path the file image file.</param>
    </member>
    <member name="M:Utility.clsNetworking.GetOldestFile(System.String)">
      <summary>
Returns the oldest file in a specified file path.</summary>
      <returns>
The file name.</returns>
      <param name="FilePath">
The path to search.</param>
    </member>
    <member name="M:Utility.clsNetworking.AppendText(System.String,System.String,System.Int32)">
      <summary>
AppendAllText with retry to avoid locking issues.</summary>
      <remarks>
Will raise an error if unsuccessful.</remarks>
      <param name="FileName">
The file name to append.</param>
      <param name="Text">
The text to append.</param>
      <param name="TimeOutSecs">
Optional timeout in seconds.</param>
    </member>
    <member name="M:Utility.clsNetworking.CaptureScreen">
      <summary>
Gets a screen shot.</summary>
      <returns>
An image of the current screen.</returns>
    </member>
    <member name="M:Utility.clsNetworking.CaptureForm(System.Windows.Forms.Form)">
      <summary>
Gets a screen shot of an application form.</summary>
      <returns>
An image of the form.</returns>
      <param name="frm">
The form to capture.</param>
    </member>
    <member name="M:Utility.clsNetworking.MailSend(System.String,System.String,System.String,System.String[],System.String)">
      <summary>
Send an email message using from the local system.</summary>
      <param name="SendTo">
Mail destination address.</param>
      <param name="Subject">
The subject line of the email message.</param>
      <param name="Body">
HTML Body of the email message.</param>
      <param name="Attachments">
Optional array of attachment file network path specifications.</param>
      <param name="SendAs">
Optional sender address.</param>
    </member>
    <member name="M:Utility.clsNetworking.MailSendRem(System.String,System.String,System.String,System.String[],System.String)">
      <summary>
Send an email message through the remote server.</summary>
      <param name="SendTo">
Mail destination address.</param>
      <param name="Subject">
The subject line of the email message.</param>
      <param name="Body">
HTML Body of the email message.</param>
      <param name="Attachments">
Optional array of attachment file network path specifications.</param>
      <param name="SendAs">
Optional sender address.</param>
    </member>
    <member name="M:Utility.clsNetworking.MailError(System.String,System.String,System.String,System.Boolean)">
      <summary>
Send an email report of an error.</summary>
      <param name="SendTo">
Mail destination address.</param>
      <param name="Subject">
The subject line of the email message.</param>
      <param name="HTMLBody">
HTML Body of the email message.</param>
      <param name="Screenshot">
True to include a screenshot.</param>
    </member>
    <member name="M:Utility.clsNetworking.EmailValidate(System.String,System.Boolean)">
      <summary>
Validates an email address</summary>
      <returns>
An empty string on success or an error string describing the failure.</returns>
      <param name="EmailAddress">
The email address to validate</param>
      <param name="TryConnect">
False to check format only, True to attempt to get an SMTP response.</param>
    </member>
    <member name="T:Utility.clsNetworking.AspectListener">
      <summary>
Listens for Member ID reports from the Aspect call handling system.</summary>
      <remarks>
Use WithEvents when you declare an AspectListener and handle the AspectReceived event.</remarks>
    </member>
    <member name="E:Utility.clsNetworking.AspectListener.AspectReceived">
      <summary>
Raised when a Member ID is received from the Aspect call handling system.</summary>
      <param name="MemberID">
The Member ID received from the Aspect system.</param>
    </member>
    <member name="M:Utility.clsNetworking.AspectListener.#ctor(System.Int32)">
      <summary>
Initializes a new instance of the <see cref="T:Utility.clsNetworking.AspectListener">AspectListener</see> class.</summary>
      <param name="ListeningPort">
</param>
    </member>
    <member name="M:Utility.clsNetworking.GetUserProperty(System.String,System.String,System.String)">
      <summary>
Get a property for a particular user</summary>
      <remarks>
Returns only the first value of PropertyName</remarks>
      <returns>
The first property value</returns>
      <param name="PropertyName">
Property name to return</param>
      <param name="UserName">
Optional username, defaults to current.</param>
      <param name="path">
Optional LDAP path. Defaults to current.</param>
    </member>
    <member name="M:Utility.clsNetworking.IsPrinterInstalled(System.String)">
      <summary>
Checks if a named printer is installed.</summary>
      <param name="PrinterName">
The name of the printer to check.</param>
    </member>
    <member name="M:Utility.clsNetworking.GetPrinters">
      <summary>
Returns a datatable of installed printers.</summary>
    </member>
    <member name="M:Utility.clsNetworking.PrintText(System.String,System.String,System.Boolean)">
      <summary>
Sends a text document to the printer.</summary>
      <param name="Text">
The text document to print.</param>
      <param name="PrinterName">
The name of the printer. Default is default printer.</param>
      <param name="Landscape">
Set to True to print landscape.</param>
    </member>
    <member name="M:Utility.clsNetworking.PrintFile(System.String,System.String)">
      <summary>
Sends a file to a printer.</summary>
      <remarks>
To fax, you can simply print to \\sv-hfi-rfax\HPFAX (assuming that is your networked fax printer) In your fax, you can embed fax commands for automatic faxing (substitute angle brackets for []) [COVER][ToName:Tyson Gill][ToFaxNum:912128095066][Note:Transportation Request] Note that you must put this embedded XML in the System font in order for RightFax to recognize it.</remarks>
      <param name="FileName">
The file name to print.</param>
      <param name="PrinterName">
Optional name of the printer to send the document to. If no PrinterName is provided it is sent to the default printer.</param>
    </member>
    <member name="M:Utility.clsNetworking.PGPEncrypt(System.String,System.String)">
      <summary>
Encrypt a file using PGP.</summary>
      <param name="FileName">
The file to encrypt.</param>
      <param name="PGPKey">
The key name to use (must exist in keyring on server).</param>
    </member>
    <member name="M:Utility.clsNetworking.PGPDecrypt(System.String,System.String)">
      <summary>
Encrypt a file using PGP.</summary>
      <param name="FileName">
The file to encrypt.</param>
      <param name="Passphrase">
The passphrase to decrypt (must match key in ring on server).</param>
    </member>
    <member name="M:Utility.clsNetworking.FTPGet(System.String,System.String,System.String,System.String)">
      <summary>
Retrieves an ftp file.</summary>
      <returns>
The retrieved file.</returns>
      <param name="FTPAddress">
The full ftp address of the file to retrieve.</param>
      <param name="UserName">
The username, or empty if anonymous.</param>
      <param name="Password">
The password, or empty if none is needed.</param>
      <param name="LocalFile">
The local file to create, or empty if none is needed.</param>
    </member>
    <member name="M:Utility.clsNetworking.FTPPut(System.String,System.String,System.String,System.String)">
      <summary>
Sends an ftp file.</summary>
      <returns>
The retrieved file.</returns>
      <param name="LocalFile">
The local file to send.</param>
      <param name="FTPAddress">
The full ftp address of the file to create.</param>
      <param name="UserName">
The username, or empty if anonymous.</param>
      <param name="Password">
The password, or empty if none is needed.</param>
    </member>
    <member name="M:Utility.clsNetworking.GetRegValue(Microsoft.Win32.RegistryHive,System.String,System.String)">
      <summary>
Retrieves a registry value.</summary>
      <returns>
The retrieved value.</returns>
      <param name="Hive">
The registry hive to search.</param>
      <param name="Key">
The registry key to search.</param>
      <param name="ValueName">
The registry value to retrieve.</param>
    </member>
    <member name="M:Utility.clsNetworking.TCPSend(System.String,System.String,System.String)">
      <summary>
Submits a packet to a host server and returns a the response.</summary>
      <param name="IP">
The IP Address to connect to.</param>
      <param name="Port">
The IP Port to connect to.</param>
      <param name="Request">
The packet to send.</param>
    </member>
    <member name="M:Utility.clsNetworking.TCPSendRem(System.String,System.String,System.String)">
      <summary>
Submits a packet to a host server and returns a the response (request is routed through the remote server).</summary>
      <param name="IP">
The IP Address to connect to.</param>
      <param name="Port">
The IP Port to connect to.</param>
      <param name="Request">
The packet to send.</param>
    </member>
    <member name="M:Utility.clsNetworking.CheckRemoteLibrary">
      <summary>
Returns True if the remote library is responding.</summary>
    </member>
    <member name="M:Utility.clsNetworking.GetDistanceRem(System.String,System.String)">
      <summary>
Get the distance between two locations (request is routed through the remote server).</summary>
      <returns>
Distance in miles.</returns>
      <param name="FromLoc">
Starting location, address and/or zip code.</param>
      <param name="ToLoc">
Ending location, address and/or zip code.</param>
    </member>
    <member name="M:Utility.clsNetworking.IconFromFile(System.String,System.Boolean)">
      <summary>
Return the icon associated with a file.</summary>
      <remarks>
Works with file links.</remarks>
      <returns>
The icon associated wtih the file.</returns>
      <param name="FileName">
The file name to extract.</param>
      <param name="LargeIcon">
The default value is True
.</param>
    </member>
    <member name="T:Utility.clsNetworking.Impersonator">
      <summary>
A class to allow the application to impersonate another user.</summary>
      <remarks>
The local policy has to allow users to 'Act As Part of the Operating System.</remarks>
    </member>
    <member name="M:Utility.clsNetworking.Impersonator.ImpersonateStart(System.String,System.String,System.String)">
      <summary>
Impersonate another windows account</summary>
      <remarks>
Impersonation will remain active until ImpersonateStop is called or the application ends.</remarks>
      <returns>
An errorstring, empty if there is no error.</returns>
      <param name="Domain">
The domain on which the user account resides</param>
      <param name="userName">
The name of the user account</param>
      <param name="Password">
The password for the user account</param>
    </member>
    <member name="M:Utility.clsNetworking.Impersonator.ImpersonateStop">
      <summary>
End the current impersonation and return to the default user</summary>
    </member>
    <member name="M:Utility.clsNetworking.Impersonator.GetCurrentUser">
      <summary>
Get the currently impersonated user.</summary>
    </member>
    <member name="T:Utility.SmartGrid">
      <summary>
A wrapped DataGridView that handles much of the nuts and bolts of grid programming for you.</summary>
      <remarks>
The SmartGrid appears in your Visual Studio toolbox when you reference Utlitiy.dll in your project.</remarks>
    </member>
    <member name="T:Utility.frmSmartFilter">
      <summary>
Used by the SmartGrid to filter the result set</summary>
    </member>
    <member name="T:Utility.frmListSelector">
      <summary>
A general use form to select an item from a list.</summary>
      <remarks>
Use ui.SelectFromList to display.</remarks>
    </member>
    <member name="T:Utility.clsMedia">
      <summary>
General library for MCI Multimedia routines.</summary>
    </member>
    <member name="M:Utility.clsMedia.MediaPlay(System.String)">
      <summary>
Play a media file</summary>
      <returns>
A string if an error is encountered, otherwise an empty string.</returns>
      <param name="MediaPath">
The complete path of the media file to play.</param>
    </member>
    <member name="M:Utility.clsMedia.MediaRecordStart">
      <summary>
Start recording a media file</summary>
      <returns>
A string if an error is encountered, otherwise an empty string.</returns>
    </member>
    <member name="M:Utility.clsMedia.MediaRecordStop(System.String)">
      <summary>
Record a media file</summary>
      <returns>
A string if an error is encountered, otherwise an empty string.</returns>
      <param name="MediaPath">
The complete path of the media file to create.</param>
    </member>
    <member name="M:Utility.clsMedia.MediaPause">
      <summary>
Pause playback of the current file.</summary>
    </member>
    <member name="M:Utility.clsMedia.MediaResume">
      <summary>
Resume playback of the current file.</summary>
    </member>
    <member name="M:Utility.clsMedia.MediaStop">
      <summary>
Stop playback of the current file.</summary>
    </member>
    <member name="M:Utility.clsMedia.IsPlaying">
      <summary>
Check if a current file is open (playing or paused).</summary>
    </member>
    <member name="T:Utility.clsSQLParser">
    </member>
    <member name="M:Utility.clsSQLParser.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:Utility.clsSQLParser">clsSQLParser</see> class.</summary>
      <param name="sql">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.clsSQLParser.Parse(System.String)">
      <param name="sql">
</param>
    </member>
    <member name="M:Utility.clsSQLParser.AssignValues(System.Data.DataTable,System.Int32)">
      <param name="dt">
</param>
      <param name="RowNumber">
</param>
    </member>
    <member name="M:Utility.clsSQLParser.GetInsert(System.String)">
      <param name="TableName">
</param>
    </member>
    <member name="M:Utility.clsSQLParser.GetUpdate(System.String)">
      <param name="TableName">
</param>
    </member>
    <member name="M:Utility.clsSQLParser.GetTextBetween(System.String,System.String,System.String)">
      <param name="Full">
</param>
      <param name="FromPart">
</param>
      <param name="ToPart">
</param>
    </member>
    <member name="T:Utility.frmChooseRole">
      <summary>
When users have multiple roles for an application, this form can be used to select one</summary>
    </member>
    <member name="T:Utility.clsMapping">
      <summary>
General library for mapping routines.</summary>
    </member>
    <member name="M:Utility.clsMapping.GetDistance(System.String,System.String)">
      <summary>
Get the distance between two locations.</summary>
      <returns>
Distance in miles.</returns>
      <param name="FromLoc">
Starting location, address and/or zip code.</param>
      <param name="ToLoc">
Ending location, address and/or zip code.</param>
    </member>
    <member name="M:Utility.clsMapping.ShowMap(System.String,System.Int32)">
      <summary>
Display Google map location in the browser.</summary>
      <param name="Location">
Location to display.</param>
      <param name="zoom">
The default value is 0
.</param>
    </member>
    <member name="M:Utility.clsMapping.ShowDirections(System.String,System.String)">
      <summary>
Display Google map directions in the browser.</summary>
      <param name="FromLoc">
Starting location.</param>
      <param name="ToLoc">
Ending location..</param>
    </member>
    <member name="M:Utility.clsMapping.GetLadLon(System.String,System.String@,System.String@)">
      <summary>
Return the latitude and longitude for a given location.</summary>
      <remarks>
Results should only be considered reliable only if exactly 1 is returned.</remarks>
      <returns>
Number of results found.</returns>
      <param name="Location">
Starting location, an address and/or zip code.</param>
      <param name="Latitude">
Returned Latitude.</param>
      <param name="Longitude">
Returned Longitude.</param>
    </member>
    <member name="M:Utility.clsMapping.GetStandardAddress(System.String)">
      <summary>
Returns an address in standardized format.</summary>
      <returns>
The standardized address.</returns>
      <param name="Address">
The address to standardize.</param>
    </member>
    <member name="M:Utility.clsMapping.CalcDistance(System.Double,System.Double,System.Double,System.Double)">
      <summary>
Calculate the distance between two sets of geo-coordinates.</summary>
      <returns>
The direct distance between the two coordinates.</returns>
      <param name="lat1">
Latitude for the first location.</param>
      <param name="lon1">
Longitude for the first location.</param>
      <param name="lat2">
Latitude for the second location.</param>
      <param name="lon2">
Longitude for the second location.</param>
    </member>
    <member name="M:Utility.clsMapping.GetBorough(System.String)">
      <summary>
Returns the borough for a given zipcode.</summary>
      <remarks>
Requires an AppShareCon connection.</remarks>
      <returns>
The corresponding borough name.</returns>
      <param name="ZipCode">
The 5 digit zip code to look up.</param>
    </member>
    <member name="T:Utility.frmAbout">
      <summary>
A generic about box. Displayed information is taken from the project assembly information settings.</summary>
    </member>
    <member name="T:Utility.clsUserInterface">
      <summary>
General library for User Interface routines.</summary>
    </member>
    <member name="M:Utility.clsUserInterface.FormatMemberInfoGrid(System.Windows.Forms.DataGridView,System.Data.DataRow,System.Data.DataRow,System.String)">
      <summary>
Format a datagridview with member information.</summary>
      <param name="dgInfo">
</param>
      <param name="MemberData">
</param>
      <param name="SubscriberData">
</param>
      <param name="HighlightedBenefitCodes">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.clsUserInterface.MakeControlsEditable(System.Windows.Forms.Control,System.Boolean)">
      <summary>
Loops through all child controls to set their editability.</summary>
      <param name="grp">
</param>
      <param name="Editable">
The default value is True
.</param>
    </member>
    <member name="M:Utility.clsUserInterface.GetControlString(System.Windows.Forms.Control)">
      <summary>
Loops through all child controls and returns a string of current values.</summary>
      <param name="grp">
</param>
    </member>
    <member name="M:Utility.clsUserInterface.SelectFromList(System.Data.DataTable,System.String,System.String,System.String,System.String)">
      <summary>
Displays a general dialog for selecting a value from a list.</summary>
      <remarks>
Returns the first field in the datatable provided.</remarks>
      <param name="dt">
</param>
      <param name="ListField">
</param>
      <param name="Title">
The default value is ""
.</param>
      <param name="Instructions">
The default value is ""
.</param>
      <param name="ReturnedField">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.clsUserInterface.SelectFromGrid(System.Data.DataTable,System.String,System.String)">
      <summary>
Displays a general dialog for selecting a row from a a Smart Grid.</summary>
      <remarks>
Returns the modified datatable with a binary Selected column inserted at first position. It will add the column if it does not exist.</remarks>
      <param name="dtSelectFrom">
</param>
      <param name="Title">
The default value is "Record Selector"
.</param>
      <param name="Instructions">
The default value is "Select a choice from those provided below."
.</param>
    </member>
    <member name="M:Utility.clsUserInterface.SelectFromGridMulti(System.Data.DataTable,System.String,System.String,System.String)">
      <summary>
Displays a general dialog for selecting rows from a a Smart Grid.</summary>
      <remarks>
Returns the modified datatable with a binary Selected column inserted at first position. It will add the column if it does not exist.</remarks>
      <param name="dtSelectFrom">
</param>
      <param name="Title">
The default value is "Record Selector"
.</param>
      <param name="Instructions">
The default value is "Select a choice from those provided below."
.</param>
      <param name="CheckColumnName">
The default value is "Selected"
.</param>
    </member>
    <member name="M:Utility.clsUserInterface.ShowAbout">
      <summary>
Displays a general login form for SQL Server and MHS.</summary>
      <remarks>
Updates the connection string in Utility.</remarks>
    </member>
    <member name="M:Utility.clsUserInterface.MenuAddRecent(System.Windows.Forms.ToolStripMenuItem,System.String,System.String)">
      <summary>
Add an item to the recent menu list.</summary>
      <remarks>
To configure, add the number of child items you want as place holders and make them invisible initially.</remarks>
      <param name="mnuParent">
The parent menu item.</param>
      <param name="Display">
The menu text to dispaly.</param>
      <param name="Tag">
Key for comparison of menu items.</param>
    </member>
    <member name="M:Utility.clsUserInterface.ListFill(System.Object,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
Fill a list or dropdown combo with selections.</summary>
      <remarks>
A blank row is always recommended so user can indicate they do not know that information.</remarks>
      <param name="lst">
The list or combobox to populate.</param>
      <param name="sql">
The sql select query to retrieve.</param>
      <param name="StartValue">
The initially displayed entry.</param>
      <param name="BlankRow">
Whether to add a blank entry to the top of the list.</param>
      <param name="AddObject">
Set to True to add items as DictionaryEntry objects.</param>
    </member>
    <member name="M:Utility.clsUserInterface.ListSearch(System.Object,System.String,System.Boolean)">
      <summary>
Find a value in a list or combo box.</summary>
      <remarks>
More friendly than the built in .Net method.</remarks>
      <returns>
The index of the found item or -1.</returns>
      <param name="lst">
The list or combo box to search.</param>
      <param name="strText">
The text to find.</param>
      <param name="SearchOnKey">
The default value is False
.</param>
    </member>
    <member name="M:Utility.clsUserInterface.ShowMaintenance(System.String,System.String,System.Boolean)">
      <summary>
Displays the general table maintenance form.</summary>
      <remarks>
Expects you have current connection set in Utility.</remarks>
      <param name="TableName">
Name of the table to edit.</param>
      <param name="sql">
Sql query to edit.</param>
      <param name="Editable">
Optional True if Editable.</param>
    </member>
    <member name="M:Utility.clsUserInterface.ShowMaintenance(System.String,System.Data.DataTable,System.Boolean)">
      <summary>
Displays the general table maintenance form.</summary>
      <remarks>
Expects you have current connection set in Utility.</remarks>
      <param name="TableName">
Name of the table to edit.</param>
      <param name="dt">
Datatable to edit.</param>
      <param name="Editable">
Optional True if Editable.</param>
    </member>
    <member name="M:Utility.clsUserInterface.OpenFile(System.String)">
      <summary>
Execute or open a file.</summary>
      <remarks>
Files will open in the default Windows application associated with them.</remarks>
      <param name="FileName">
Full path and file name for file to open.</param>
    </member>
    <member name="M:Utility.clsUserInterface.ShowInBrowser(System.String,System.String)">
      <summary>
Show an HTML string in the default browser.</summary>
      <remarks>
Will write the file in the current directory.</remarks>
      <param name="PageName">
The file name to create and pass to browser.</param>
      <param name="sHTML">
The HTML string (can be plain text also).</param>
    </member>
    <member name="M:Utility.clsUserInterface.IsInString(System.String,System.String,System.String)">
      <summary>
Determines if a string is included in a delimted string.</summary>
      <returns>
True if the string is found.</returns>
      <param name="DelimitedString">
The delimited string to search.</param>
      <param name="Delimiter">
The string delimiter.</param>
      <param name="SearchString">
The string to search for.</param>
    </member>
    <member name="M:Utility.clsUserInterface.IsInArray(System.String[],System.String)">
      <summary>
Determines if a string is included in a string array.</summary>
      <returns>
True if the string is found.</returns>
      <param name="StringArray">
The string array to search.</param>
      <param name="SearchString">
The string to search for.</param>
    </member>
    <member name="M:Utility.clsUserInterface.IsInStringNumeric(System.String,System.String,System.String)">
      <summary>
Determines if a number is included in a delimted string.</summary>
      <returns>
True if the number is found.</returns>
      <param name="DelimitedString">
The delimited string to search.</param>
      <param name="Delimiter">
The string delimiter.</param>
      <param name="SearchString">
The number to search for.</param>
    </member>
    <member name="M:Utility.clsUserInterface.IsInArrayNumeric(System.String[],System.String)">
      <summary>
Determines if a number is included in a string array.</summary>
      <returns>
True if the number is found.</returns>
      <param name="StringArray">
The string array to search.</param>
      <param name="SearchString">
The number to search for.</param>
    </member>
    <member name="M:Utility.clsUserInterface.GetDateRange(System.DateTime@,System.DateTime@,System.String)">
      <summary>
Prompts the user for a date or optional date range.</summary>
      <remarks>
Start and end date are returned in the parameters passed by reference.</remarks>
      <returns>
True if user has enter a valid date or date range.</returns>
      <param name="DateFrom">
The starting date, pass Nothing for no starting date.</param>
      <param name="DateTo">
The ending date, pass Nothing for no ending date</param>
      <param name="Title">
Optional title of the date entry form.</param>
    </member>
    <member name="M:Utility.Routines.SetUserInfo(Utility.clsDataQuery)">
      <summary>
Populates Utililty.UserInfo with details about the current Windows User.</summary>
      <param name="dqhr">
The default value is Nothing
.</param>
    </member>
    <member name="M:Utility.Routines.ReportError(System.Exception,System.Boolean,System.String)">
      <summary>
Show and optionally mail error information.</summary>
      <remarks>
Mail specifications are taken from My.Settings.</remarks>
      <param name="exRep">
The exception object to report.</param>
      <param name="Fatal">
Set to False to suppress exiting application after error.</param>
      <param name="SendTo">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.Routines.ReleaseObj(System.Object@)">
      <summary>
Free a disposable object for garbage collection.</summary>
      <remarks>
Call when finished with any object that implements IDisposable.</remarks>
      <param name="obj">
The disposable object to release.</param>
    </member>
    <member name="T:Utility.clsEligibility">
      <summary>
Submit Medicaid eligibility requests and parse results</summary>
    </member>
    <member name="M:Utility.clsEligibility.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Utility.clsEligibility">clsEligibility</see> class.</summary>
    </member>
    <member name="M:Utility.clsEligibility.ClearRequest">
      <summary>
Clears request parameters but retains provider settings.</summary>
    </member>
    <member name="M:Utility.clsEligibility.GetEligibility">
      <summary>
Checks Medicare eligibility with the state.</summary>
      <returns>
A DataTable with the member eligibility results.</returns>
    </member>
    <member name="E:Utility.SmartGrid.ConfirmChange">
      <summary>
Raised when the grid detects that a cell has changed. It allows the calling application to validate according to business rules and flag any errors.</summary>
      <param name="ColumnName">
</param>
      <param name="RowNumber">
</param>
      <param name="NewValue">
</param>
      <param name="ErrorDescription">
</param>
    </member>
    <member name="E:Utility.SmartGrid.UpdateNeeded">
      <summary>
Raised when the grid detects that a row needs saving. It allows the calling application to perform and confirm the update or undo changes.</summary>
      <param name="OriginalRow">
</param>
      <param name="UpdatedRow">
</param>
      <param name="SaveAction">
</param>
    </member>
    <member name="E:Utility.SmartGrid.InsertNeeded">
      <summary>
Raised when the user click add row. It allows the calling application to perform and confirm the add or deny the add.</summary>
      <param name="InsertedRow">
</param>
      <param name="SaveAction">
</param>
    </member>
    <member name="E:Utility.SmartGrid.DeleteNeeded">
      <summary>
Raised when the user clicks delete row. It allows the calling application to perform delete and confirm or deny the delete.</summary>
      <param name="DeletedRow">
</param>
      <param name="SaveAction">
</param>
    </member>
    <member name="E:Utility.SmartGrid.RefreshNeeded">
      <summary>
Raised when the user clicks on the refresh button.</summary>
    </member>
    <member name="E:Utility.SmartGrid.RecordSelected">
      <summary>
Raised when a new record becomes the current record.</summary>
      <param name="RecordIndex">
</param>
    </member>
    <member name="E:Utility.SmartGrid.CellButtonClicked">
      <summary>
Raised when the user clicks on a cell of Button type.</summary>
      <param name="ColumnName">
</param>
      <param name="ButtonKey">
</param>
    </member>
    <member name="E:Utility.SmartGrid.ToolButtonClicked">
      <summary>
Raised when the user clicks on a an application-defined button in the toolbar.</summary>
      <param name="ButtonTag">
</param>
    </member>
    <member name="E:Utility.SmartGrid.RecordDoubleClicked">
      <summary>
Raised when the user double-clicks on a record.</summary>
      <param name="RecordIndex">
</param>
    </member>
    <member name="T:Utility.SmartGrid.ColumnProperties">
      <summary>
Specifies the style and associated properties for each column.</summary>
    </member>
    <member name="M:Utility.SmartGrid.SetToolDock(System.Windows.Forms.DockStyle)">
      <summary>
Sets the docking position of the toolbar.</summary>
      <param name="DockStyle">
</param>
    </member>
    <member name="M:Utility.SmartGrid.SetToolButtonsClear">
      <summary>
Clears any user tool buttons.</summary>
    </member>
    <member name="M:Utility.SmartGrid.SetToolButton(System.Int32,System.String,System.String,System.String,System.Boolean)">
      <summary>
Configures a user tool button.</summary>
      <param name="ButtonNumber">
</param>
      <param name="ButtonName">
</param>
      <param name="ToolTip">
The default value is ""
.</param>
      <param name="ButtonTag">
The default value is ""
.</param>
      <param name="Enabled">
The default value is True
.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetToolButtons(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
Quick method to set up all toolbar buttons in one call.</summary>
      <remarks>
If you want to specify tooltips or give the button a unique tag, use SetToolButton.</remarks>
      <param name="One">
The default value is ""
.</param>
      <param name="Two">
The default value is ""
.</param>
      <param name="Three">
The default value is ""
.</param>
      <param name="Four">
The default value is ""
.</param>
      <param name="Five">
The default value is ""
.</param>
      <param name="Six">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetStyleText(System.String,Utility.SmartGrid.TextStyles)">
      <summary>
Configure a column using a text style.</summary>
      <param name="FieldName">
The column name to set.</param>
      <param name="TextStyle">
The style for the column.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetStyleNumeric(System.String,Utility.SmartGrid.NumericStyles,System.Double,System.Double)">
      <summary>
Configure a column using a numeric style.</summary>
      <param name="FieldName">
The column name to set.</param>
      <param name="NumericStyle">
The style for the column.</param>
      <param name="MinValue">
The minimum of numeric range allowed.</param>
      <param name="MaxValue">
The maximum of numeric range allowed.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetStyleDate(System.String,Utility.SmartGrid.DateStyles,System.DateTime,System.DateTime)">
      <summary>
Configure a column using a date style.</summary>
      <param name="FieldName">
The column name to set.</param>
      <param name="DateStyle">
The style for the column.</param>
      <param name="MinDate">
The minimum of date range allowed.</param>
      <param name="MaxDate">
The maximum of date range allowed.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetStyleList(System.String,Utility.SmartGrid.ListStyles,System.Data.DataTable)">
      <summary>
Configure a column using a list style.</summary>
      <remarks>
The first column of ParamTable should be the ID, and the second column the Description to display.</remarks>
      <param name="FieldName">
The column name to set.</param>
      <param name="ListStyle">
The style for the column.</param>
      <param name="ParamTable">
A table of list items.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetStyleBoolean(System.String,Utility.SmartGrid.BooleanStyles,System.Object,System.Object)">
      <summary>
Configure a column using a boolean style.</summary>
      <param name="FieldName">
The column name to set.</param>
      <param name="BooleanStyle">
The style for the column.</param>
      <param name="YesValue">
The value to interpret as True.</param>
      <param name="NoValue">
The value to interpret as False.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetStyleClick(System.String,Utility.SmartGrid.ClickStyles,System.String)">
      <summary>
Configure a column using a click style.</summary>
      <remarks>
The SmartGrid will attempt to display the file or URL pointed to by the cell value when the user clicks on it.</remarks>
      <param name="FieldName">
The column name to set.</param>
      <param name="ClickStyle">
The style for the column.</param>
      <param name="ClickText">
The text to show in the cell.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetVisible(System.String,System.Boolean)">
      <summary>
Sets the visibility of a column.</summary>
      <param name="FieldName">
The column name to set.</param>
      <param name="Visible">
True to make the column visible.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetEditable(System.String,System.Boolean)">
      <summary>
Sets the editibility of a column.</summary>
      <param name="FieldName">
The column name to set.</param>
      <param name="Editable">
True to make the column editable.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetEditable(System.Boolean)">
      <summary>
Sets the editibility of the entire table.</summary>
      <param name="Editable">
True to make the column editable.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetFrozen(System.String,System.Boolean)">
      <summary>
Sets the freeze behavior of a column.</summary>
      <param name="FieldName">
The column name to set.</param>
      <param name="Frozen">
True to make the column frozen.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetHeaderText(System.String,System.String)">
      <summary>
Sets the header name of a column.</summary>
      <remarks>
Note that the HeaderText defaults to the FieldName automatically.</remarks>
      <param name="FieldName">
The column name to set.</param>
      <param name="HeaderText">
The header text to display.</param>
    </member>
    <member name="M:Utility.SmartGrid.Filter">
      <summary>
Displays the record filtering dialog.</summary>
    </member>
    <member name="M:Utility.SmartGrid.Sort(System.String,System.ComponentModel.ListSortDirection)">
      <summary>
Sorts the records of the grid.</summary>
      <param name="FieldName">
The column name to set.</param>
      <param name="Direction">
The direction for the sort.</param>
    </member>
    <member name="M:Utility.SmartGrid.GridClear">
      <summary>
Clears the grid.</summary>
    </member>
    <member name="M:Utility.SmartGrid.GridShow(Utility.SmartGrid.Orientations)">
      <summary>
Display the grid after the GridTable is assigned.</summary>
      <remarks>
You must assign the GridTable and set any custom styles before calling this method.</remarks>
      <param name="StartingOrientation">
The starting orientation, defaults to automatic selection.</param>
    </member>
    <member name="M:Utility.SmartGrid.OrientationFlip">
      <summary>
Toggle the current orientation between Vertical and Horizontal.</summary>
    </member>
    <member name="M:Utility.SmartGrid.GetRecord(System.Int32)">
      <summary>
Returns the current record.</summary>
      <param name="RecordNum">
The record number to return or -1 for the current record.</param>
    </member>
    <member name="M:Utility.SmartGrid.RecordUpdate(System.Data.DataRow,System.Int32)">
      <summary>
Updates a record with a new set of values.</summary>
      <param name="RecordData">
The DataRow to update from. Must match GridTable.Clone().</param>
      <param name="RecordNum">
The record number to return or -1 for the current record.</param>
    </member>
    <member name="M:Utility.SmartGrid.GetCell(System.String,System.Int32)">
      <summary>
Returns a cell value.</summary>
      <param name="ColName">
The column name to retrieve, defaults to the current column.</param>
      <param name="RecordNum">
The record number to retrieve, defaults to the current record.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetCell(System.Object,System.String,System.Int32)">
      <summary>
Updates a cell with a new set of value.</summary>
      <param name="CellValue">
The new value to assign to the cell.</param>
      <param name="ColName">
The column name to update, defaults to the current column.</param>
      <param name="RecordNum">
The record number to update, defaults to the current record.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetRecord(System.Int32)">
      <summary>
Selects and displays a record.</summary>
      <param name="RecordNum">
The record number to make current.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetColWidth(System.String,System.Double)">
      <summary>
Adjust the width of a column.</summary>
      <remarks>
This should be called after GridShow.</remarks>
      <param name="ColName">
The name of the column to adjust.</param>
      <param name="Factor">
The column width multiplier.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetColWidth(System.Int32,System.Double)">
      <summary>
Adjust the width of a column.</summary>
      <param name="ColNum">
The index of the column to adjust.</param>
      <param name="Factor">
The column width multiplier.</param>
    </member>
    <member name="M:Utility.SmartGrid.ReportFieldLengths">
      <summary>
Displays a report of actual field lengths.</summary>
    </member>
    <member name="M:Utility.SmartGrid.SaveChanges(System.Int32)">
      <param name="RecordNum">
The default value is -1
.</param>
    </member>
    <member name="M:Utility.SmartGrid.GridCopy">
      <summary>
Saves the contents of the grid to the clipboard.</summary>
    </member>
    <member name="M:Utility.SmartGrid.SetDisplayedValue(System.Int32,System.String,System.Object,System.Boolean)">
      <summary>
Sets the contents of a cell.</summary>
      <param name="RecordNum">
</param>
      <param name="ColName">
</param>
      <param name="Value">
</param>
      <param name="Commit">
The default value is False
.</param>
    </member>
    <member name="M:Utility.SmartGrid.SetDisplayedValue(System.Int32,System.Int32,System.Object,System.Boolean)">
      <summary>
Sets the contents of a cell.</summary>
      <param name="RecordNum">
</param>
      <param name="ColNum">
</param>
      <param name="Value">
</param>
      <param name="Commit">
The default value is False
.</param>
    </member>
    <member name="T:Utility.SmartGrid.CalendarColumn">
    </member>
    <member name="M:Utility.SmartGrid.CalendarColumn.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Utility.SmartGrid.CalendarColumn">CalendarColumn</see> class.</summary>
    </member>
    <member name="P:Utility.SmartGrid.CalendarColumn.CellTemplate">
    </member>
    <member name="T:Utility.SmartGrid.CalendarCell">
    </member>
    <member name="M:Utility.SmartGrid.CalendarCell.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Utility.SmartGrid.CalendarCell">CalendarCell</see> class.</summary>
    </member>
    <member name="M:Utility.SmartGrid.CalendarCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
      <param name="rowIndex">
</param>
      <param name="initialFormattedValue">
</param>
      <param name="dataGridViewCellStyle">
</param>
    </member>
    <member name="P:Utility.SmartGrid.CalendarCell.DefaultNewRowValue">
    </member>
    <member name="P:Utility.SmartGrid.CalendarCell.ValueType">
    </member>
    <member name="P:Utility.SmartGrid.CalendarCell.EditType">
    </member>
    <member name="T:Utility.SmartGrid.CalendarEditingControl">
    </member>
    <member name="M:Utility.SmartGrid.CalendarEditingControl.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Utility.SmartGrid.CalendarEditingControl">CalendarEditingControl</see> class.</summary>
    </member>
    <member name="M:Utility.SmartGrid.CalendarEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
      <param name="context">
</param>
    </member>
    <member name="M:Utility.SmartGrid.CalendarEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
      <param name="dataGridViewCellStyle">
</param>
    </member>
    <member name="M:Utility.SmartGrid.CalendarEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
      <param name="key">
</param>
      <param name="dataGridViewWantsInputKey">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:Utility.SmartGrid.CalendarEditingControl.PrepareEditingControlForEdit(System.Boolean)">
      <param name="selectAll">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="P:Utility.SmartGrid.CalendarEditingControl.RepositionEditingControlOnValueChange">
      <summary>
Gets a value indicating whether .</summary>
    </member>
    <member name="P:Utility.SmartGrid.CalendarEditingControl.EditingControlDataGridView">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:Utility.SmartGrid.CalendarEditingControl.EditingControlCursor">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Utility.SmartGrid.CalendarEditingControl.EditingControlValueChanged">
      <summary>
Gets or sets a value indicating whether .</summary>
    </member>
    <member name="P:Utility.SmartGrid.CalendarEditingControl.EditingControlFormattedValue">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:Utility.SmartGrid.CalendarEditingControl.EditingControlRowIndex">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="T:Utility.SmartGrid.NumericUpDownColumn">
    </member>
    <member name="M:Utility.SmartGrid.NumericUpDownColumn.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Utility.SmartGrid.NumericUpDownColumn">NumericUpDownColumn</see> class.</summary>
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownColumn.CellTemplate">
    </member>
    <member name="T:Utility.SmartGrid.NumericUpDownCell">
    </member>
    <member name="M:Utility.SmartGrid.NumericUpDownCell.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Utility.SmartGrid.NumericUpDownCell">NumericUpDownCell</see> class.</summary>
    </member>
    <member name="M:Utility.SmartGrid.NumericUpDownCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
      <param name="rowIndex">
</param>
      <param name="initialFormattedValue">
</param>
      <param name="dataGridViewCellStyle">
</param>
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownCell.ValueType">
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownCell.DefaultNewRowValue">
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownCell.EditType">
    </member>
    <member name="T:Utility.SmartGrid.NumericUpDownEditingControl">
    </member>
    <member name="M:Utility.SmartGrid.NumericUpDownEditingControl.#ctor">
      <summary>
Initializes a new instance of the <see cref="T:Utility.SmartGrid.NumericUpDownEditingControl">NumericUpDownEditingControl</see> class.</summary>
    </member>
    <member name="M:Utility.SmartGrid.NumericUpDownEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
      <param name="context">
</param>
    </member>
    <member name="M:Utility.SmartGrid.NumericUpDownEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
      <param name="dataGridViewCellStyle">
</param>
    </member>
    <member name="M:Utility.SmartGrid.NumericUpDownEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
      <param name="key">
</param>
      <param name="dataGridViewWantsInputKey">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:Utility.SmartGrid.NumericUpDownEditingControl.PrepareEditingControlForEdit(System.Boolean)">
      <param name="selectAll">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownEditingControl.EditingControlFormattedValue">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownEditingControl.EditingControlCursor">
      <summary>
Gets .</summary>
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownEditingControl.EditingControlValueChanged">
      <summary>
Gets or sets a value indicating whether .</summary>
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownEditingControl.EditingControlRowIndex">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownEditingControl.RepositionEditingControlOnValueChange">
      <summary>
Gets a value indicating whether .</summary>
    </member>
    <member name="P:Utility.SmartGrid.NumericUpDownEditingControl.EditingControlDataGridView">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="M:Utility.SmartGrid.GridPrint(System.String)">
      <summary>
Print the data as currently displayed in the SmartGrid.</summary>
      <remarks>
Goes to current default printer.</remarks>
      <param name="Title">
Title to appear on the report.</param>
    </member>
    <member name="P:Utility.SmartGrid.Orientation">
      <summary>
Sets the current orientation of the grid.</summary>
    </member>
    <member name="P:Utility.SmartGrid.GridTable">
      <summary>
Assign the datatable to display and initialize grid formatting properties so that the user can override before displaying.</summary>
    </member>
    <member name="M:Utility.frmSmartFilter.#ctor(Utility.SmartGrid)">
      <summary>
Initializes a new instance of the <see cref="T:Utility.frmSmartFilter">frmSmartFilter</see> class.</summary>
      <param name="sgc">
</param>
    </member>
    <member name="T:Utility.frmSmartSelector">
      <summary>
A general use record selector form utilizing the SmartGrid.</summary>
      <remarks>
Use ui.SelectFromGrid to display.</remarks>
    </member>
    <member name="T:Utility.clsFolderWatcher">
      <summary>
Watches a folder and raises an event when a file chanegs.</summary>
    </member>
    <member name="E:Utility.clsFolderWatcher.FileChanged">
      <summary>
Raised when a file in the watch folder has been modified.</summary>
      <remarks>
Use WithEvents when you declare clsFolderWatcher and handle this event.</remarks>
      <param name="FileName">
Name of the file that has changed.</param>
      <param name="Change">
The change type, or the new file name.</param>
    </member>
    <member name="M:Utility.clsFolderWatcher.#ctor(System.String,System.Boolean)">
      <summary>
Initializes a new instance of the <see cref="T:Utility.clsFolderWatcher">clsFolderWatcher</see> class.</summary>
      <param name="Folder">
</param>
      <param name="Enabled">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:Utility.clsFolderWatcher.GetFileTable">
      <summary>
Returns a listing of files in the folder.</summary>
      <returns>
A DataTable with the File Name and Updated Date.</returns>
    </member>
    <member name="P:Utility.clsFolderWatcher.Folder">
      <summary>
The folder to monitor.</summary>
    </member>
    <member name="P:Utility.clsFolderWatcher.Enabled">
      <summary>
True to raise an event when a file changes.</summary>
    </member>
    <member name="T:Utility.clsDatabase">
      <summary>
General library for database routines.</summary>
      <remarks>
Note that this class requires an AppShareCon to be present in the db.Connections collection for hit and event logging.</remarks>
    </member>
    <member name="M:Utility.clsDatabase.ImageWrite(System.String,System.String,System.String,System.Drawing.Image)">
      <summary>
Writes an image to a database field.</summary>
      <param name="TableName">
The table to write to.</param>
      <param name="FieldName">
The field to write to.</param>
      <param name="Where">
The record selection clause.</param>
      <param name="ImageData">
The image to write.</param>
    </member>
    <member name="M:Utility.clsDatabase.BinaryWrite(System.String,System.String,System.String,System.Byte[])">
      <summary>
Writes binary data to a database field.</summary>
      <param name="TableName">
The table to write to.</param>
      <param name="FieldName">
The field to write to.</param>
      <param name="Where">
The record selection clause.</param>
      <param name="BinData">
The binary data to write.</param>
    </member>
    <member name="M:Utility.clsDatabase.ImageRead(System.String)">
      <summary>
Reads an image from a database field.</summary>
      <returns>
The image.</returns>
      <param name="sql">
Selects the image field.</param>
    </member>
    <member name="M:Utility.clsDatabase.BinaryRead(System.String)">
      <summary>
Reads binary data from a database field.</summary>
      <returns>
The data.</returns>
      <param name="sql">
Selects the binary field.</param>
    </member>
    <member name="M:Utility.clsDatabase.DataTableExport(System.Data.DataTable,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
      <summary>
Writes a DataTable into a CSV file.</summary>
      <param name="dt">
The DataTable to export.</param>
      <param name="FullPath">
The fully specified path and name of the file to export.</param>
      <param name="IncludeHeader">
Set True to include a header.</param>
      <param name="Delimiter">
The default value is ","
.</param>
      <param name="IncludeQuotes">
The default value is True
.</param>
      <param name="Append">
Set to True if you wish to append an existing file.</param>
    </member>
    <member name="M:Utility.clsDatabase.TextImport(System.String,System.Boolean)">
      <summary>
Reads a text file into a DataTable.</summary>
      <remarks>
This routine uses the OLEDB text reader to import any text file. By default it will attempt to assign the column types for a comma delimited file. If you have any other type of file, you can specify the file format in a Schema.ini file in the same folder as the file to be imported. This will handle any type of delimiter or fixed-width files. See http://msdn2.microsoft.com/en-us/library/ms709353.aspx for a description of the schema file format.</remarks>
      <returns>
A DataTable.</returns>
      <param name="FullPath">
The fully specified path and name of the file to import.</param>
      <param name="HasHeader">
Set True if the file includes a header.</param>
    </member>
    <member name="M:Utility.clsDatabase.TextImportDelimited(System.String,System.Boolean,System.String,System.Boolean)">
      <summary>
Reads a delimited text file into a DataTable.</summary>
      <returns>
A DataTable.</returns>
      <param name="FullPath">
The fully specified path and name of the file to import.</param>
      <param name="HasHeader">
Set True if the file includes a header.</param>
      <param name="Delimiter">
The default value is ","
.</param>
      <param name="StripQuotes">
The default value is True
.</param>
    </member>
    <member name="M:Utility.clsDatabase.ExcelImport(System.String,System.String,System.Boolean)">
      <summary>
Reads an Excel worksheet into a DataTable.</summary>
      <remarks>
Supports Excel 8.0 (Excel 97 and above)</remarks>
      <returns>
A DataTable.</returns>
      <param name="FullPath">
The fully specified path and name of the Excel file to import.</param>
      <param name="SheetName">
The name of the worksheet to import.</param>
      <param name="HasHeader">
The default value is True
.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetExcelSchema(System.String)">
      <summary>
Reads the schema of an Excel spreadsheet into a DataTable.</summary>
      <returns>
A DataTable containing the spreadsheet schema.</returns>
      <param name="FullPath">
The fully specified path and name of the Excel file to read.</param>
    </member>
    <member name="M:Utility.clsDatabase.XmlFromDatatable(System.Data.DataTable)">
      <summary>
Returns an XML string of a dataset.</summary>
      <returns>
An XML string in standard recordset format.</returns>
      <param name="dt">
The dataset to convert.</param>
    </member>
    <member name="M:Utility.clsDatabase.XmlToDatatable(System.String)">
      <summary>
Converts an XML string to a dataset.</summary>
      <returns>
A dataset.</returns>
      <param name="sXML">
The standard recordset format XML string to convert.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetSysParam(System.String,System.String,System.String,System.Boolean)">
      <summary>
Returns a single named system parameter value.</summary>
      <remarks>
Requires a AppShareCon connection.</remarks>
      <returns>
A single Parameter Description from the SystemParameters table.</returns>
      <param name="ParamName">
The Parameter Name to retrieve.</param>
      <param name="ItemKey">
The Parameter Key to retrieve.</param>
      <param name="AppName">
If you wish to specify a particular application.</param>
      <param name="ActiveOnly">
Set to False if you wish to include inactive items.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetSysParamTable(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
Returns a named system parameter table.</summary>
      <remarks>
Requires a AppShareCon connection.</remarks>
      <returns>
A DataTable from the SystemParameters table.</returns>
      <param name="ParamName">
The Parameter Name to retrieve.</param>
      <param name="AppName">
If you wish to specify a particular application.</param>
      <param name="ActiveOnly">
Set to False if you wish to include inactive items.</param>
      <param name="UseSort">
Set to False if you wish to sort on ItemDesc rather than ItemPos.</param>
    </member>
    <member name="M:Utility.clsDatabase.ErrorTableCreate(System.String,System.String)">
      <summary>
Creates an ErrorTable to return error information.</summary>
      <remarks>
An ExtendedProperty called ErrorTable is set to True to identify.</remarks>
      <returns>
A single row, single column datatable with the error message.</returns>
      <param name="ErrorMessage">
The description of the condition.</param>
      <param name="TableName">
Optional name for the ErrorTable.</param>
    </member>
    <member name="M:Utility.clsDatabase.ErrorTableCheck(System.Data.DataTable)">
      <summary>
Checks if a datatable contains error information.</summary>
      <remarks>
Create an ErrorTable using ErrorTableCreate().</remarks>
      <returns>
True if the table is an ErrorTable.</returns>
      <param name="dt">
The datatable to check.</param>
    </member>
    <member name="M:Utility.clsDatabase.IsSQLConnectionValid(System.String)">
      <summary>
Verify that a valid SQL Server connection string has been passed.</summary>
      <returns>
True if connection is valid.</returns>
      <param name="ConnectionString">
</param>
    </member>
    <member name="M:Utility.clsDatabase.IsODBCConnectionValid(System.String)">
      <summary>
Verify that a valid ODBC connection string has been passed.</summary>
      <returns>
True if connection is valid.</returns>
      <param name="ConnectionString">
</param>
    </member>
    <member name="M:Utility.clsDatabase.PromptForConnection(System.Boolean,System.String)">
      <summary>
Prompts for a database connection string.</summary>
      <returns>
The connection string.</returns>
      <param name="SQLServer">
Set to true if connecting to SQL Server</param>
      <param name="SQLServerName">
Set to Server Name if known and SQLServer is True</param>
    </member>
    <member name="M:Utility.clsDatabase.GetCurrentDatabase">
      <summary>
Get default database for current connection string.</summary>
      <returns>
The database name.</returns>
    </member>
    <member name="M:Utility.clsDatabase.GetCurrentProvider">
      <summary>
Get default provider for current connection string.</summary>
      <returns>
The provider name.</returns>
    </member>
    <member name="M:Utility.clsDatabase.GetConnectionReport">
      <summary>
Returns a report of all connection strings.</summary>
      <remarks>
Suitable for display. Does not contain user and password information.</remarks>
      <returns>
Connection report in datatable.</returns>
    </member>
    <member name="M:Utility.clsDatabase.GetSQLDataReader(System.String)">
      <summary>
Return a SQL datareader.</summary>
      <returns>
A datareader.</returns>
      <param name="Sql">
The sql select query to retrieve.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetODBCDataReader(System.String)">
      <summary>
Return an ODBC datareader.</summary>
      <returns>
A datareader.</returns>
      <param name="Sql">
The sql select query to retrieve.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetDictionary(System.String,System.Boolean)">
      <summary>
Return a Dictionary.</summary>
      <returns>
A populated ListDictionary.</returns>
      <param name="sql">
The sql select query to retrieve.</param>
      <param name="BlankRow">
Whether to add a blank row at top.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetDataSet(System.String,System.String)">
      <summary>
Return a dataset.</summary>
      <returns>
A populated dataset with a new named table.</returns>
      <param name="Sql">
The sql select query to retrieve.</param>
      <param name="TableName">
The table name to add to the dataset.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetDataTable(System.String,System.String,System.Boolean)">
      <summary>
Return a datatable.</summary>
      <remarks>
Adds sql query string to an ExtendedProperty named QueryString.</remarks>
      <returns>
A populated datatable.</returns>
      <param name="Sql">
The sql select query to retrieve.</param>
      <param name="TableName">
The table name to create.</param>
      <param name="MapSchema">
The default value is True
.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetValueText(System.String)">
      <summary>
Return a single text value from a database query.</summary>
      <returns>
The first field of the first record field specified in the sql query.</returns>
      <param name="sql">
Query returning a single text value.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetValue(System.String,System.Boolean)">
      <summary>
Return a single value from a database query.</summary>
      <returns>
The first field of the first record field specified in the sql query.</returns>
      <param name="sql">
Query returning a single value.</param>
      <param name="GetIdentity">
Set to true to return the identity for an insert query.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetValueCmd(System.Data.SqlClient.SqlCommand)">
      <summary>
Return a single value from a SQL database query.</summary>
      <remarks>
Function will return the first field in first record selected.</remarks>
      <returns>
A field value.</returns>
      <param name="cmd">
A SQL Command Object.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetValueCmd(System.Data.Odbc.OdbcCommand)">
      <summary>
Return a single value from an ODBC database query.</summary>
      <remarks>
Function will return the first field in first record selected.</remarks>
      <returns>
A field value.</returns>
      <param name="cmd">
An ODBC Command Object.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetRecordCount(System.Data.DataTable)">
      <summary>
Safely returns a datatable record count.</summary>
      <remarks>
Safely returns a record count even if the datatable is Nothing.</remarks>
      <returns>
A numeric record count.</returns>
      <param name="dt">
The datatable to check.</param>
    </member>
    <member name="M:Utility.clsDatabase.ExecuteAction(System.String)">
      <summary>
Performs an action query.</summary>
      <returns>
Number of rows affected.</returns>
      <param name="Sql">
Can be a sql action query or exec sp.</param>
    </member>
    <member name="M:Utility.clsDatabase.ExecuteSpSQL(System.String,System.Data.SqlClient.SqlParameter[]@,System.Int32)">
      <summary>
Executes a stored procedure with optional parameters against SQL Server.</summary>
      <remarks>
The procedure will retry up to three times.</remarks>
      <returns>
Number of rows affected.</returns>
      <param name="strProcName">
The name of the stored procedure to execute.</param>
      <param name="Params">
The parameter array.</param>
      <param name="Timeout">
An optional timeout in seconds.</param>
    </member>
    <member name="M:Utility.clsDatabase.ExecuteSpODBC(System.String,System.Data.Odbc.OdbcParameter[]@,System.Int32)">
      <summary>
Executes a stored procedure with optional parameters against an ODBC datasource.</summary>
      <remarks>
The procedure will retry up to three times.</remarks>
      <returns>
Number of rows affected.</returns>
      <param name="strProcName">
The name of the stored procedure to execute.</param>
      <param name="Params">
The parameter array.</param>
      <param name="Timeout">
An optional timeout in seconds.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetRowCopy(System.Data.DataTable,System.Int32)">
      <summary>
Return an editable copy of a record in a datatable.</summary>
      <remarks>
Any ReadOnly rows are made editable in the copy.</remarks>
      <returns>
A new DataRow with the copied fields.</returns>
      <param name="dt">
The datatable to saerch.</param>
      <param name="RecordNumber">
The record number to copy.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetRowValue(System.Data.DataTable,System.String,System.String)">
      <summary>
Search a datatable for a row and return a column value.</summary>
      <remarks>
Returns Nothing if more than one row is returned from search.</remarks>
      <returns>
Value of the field.</returns>
      <param name="dt">
The datatable to saerch.</param>
      <param name="criteria">
The search criteria, e.g. "ColumnName = 'Test'.</param>
      <param name="ReturnedColumn">
The column name from which to return data.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetSchema(System.String)">
      <summary>
Return a datatable containing columns schema information for a table or database.</summary>
      <remarks>
Fields include COLUMN_NAME, COLUMN_DEFAULT, IS_NULLABLE, DATA_TYPE, and CHARACTER_MAXIMUM_LENGTH for each field in the table. Note that GetDataTable includes schema information automatically, typically making this unnecessary.</remarks>
      <returns>
A datatable with a row for each field.</returns>
      <param name="TableName">
Table to query, or empty string for all tables.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetMaxFieldLength(System.Data.DataTable,System.String)">
      <summary>
Returns the maximum number of characters in a field.</summary>
      <remarks>
Will return the maximum string length for numeric fields.</remarks>
      <returns>
The maximum number of characters in the specified field.</returns>
      <param name="dt">
The datatable to scan.</param>
      <param name="FieldName">
The name of the field to scan.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetDistinctString(System.Data.DataTable,System.String,System.Boolean)">
      <summary>
Return a delimited string for all unique values in a column.</summary>
      <returns>
A delimited string of column values.</returns>
      <param name="dt">
The DataTable to search for disinct entries.</param>
      <param name="ColName">
The name of the column to search for distinct entries.</param>
      <param name="IncludeQuotes">
The default value is True
.</param>
    </member>
    <member name="M:Utility.clsDatabase.GetDistinct(System.Data.DataTable,System.String)">
      <summary>
Return collection of distinct members of a datatable column.</summary>
      <returns>
A collection of distinct column values.</returns>
      <param name="dt">
The DataTable to search for disinct entries.</param>
      <param name="ColName">
The name of the column to search for distinct entries.</param>
    </member>
    <member name="M:Utility.clsDatabase.SortDataTable(System.Data.DataTable,System.String)">
      <summary>
Sorts a datatable.</summary>
      <remarks>
Sort string should be in standard SQL format like "[Member ID], [Group Number] DESC"</remarks>
      <returns>
A sorted datatable.</returns>
      <param name="dt">
The datatable to sort.</param>
      <param name="SortString">
The sort string.</param>
    </member>
    <member name="M:Utility.clsDatabase.LogQueryStart(System.String)">
      <summary>
Log the query to the database.</summary>
      <remarks>
Note you must have an AppShareCon key in the Connections collection to use this method.</remarks>
      <param name="sql">
</param>
    </member>
    <member name="M:Utility.clsDatabase.LogQueryEnd(System.Int32)">
      <summary>
Update the query log with the elapsed query time.</summary>
      <param name="ElapsedMS">
</param>
    </member>
    <member name="M:Utility.clsDatabase.EventLogSave(System.String,System.String,System.DateTime,System.DateTime,System.String,System.String)">
      <summary>
Save event to database.</summary>
      <remarks>
Note you must have an AppShareCon key in the Connections collection to use this method.</remarks>
      <param name="EventName">
Name of the event to log.</param>
      <param name="EventDesc">
Optional description of the event.</param>
      <param name="StartTime">
Optional start time of event, defaults to Now.</param>
      <param name="EndTime">
Optional end time of event, defaults to Nothing.</param>
      <param name="UserName">
Optional User Name associated with the event, defaults to current user.</param>
      <param name="AppName">
Optional Application Name associated with the event, defaults to current user.</param>
    </member>
    <member name="T:Utility.clsDatabase.DBTransaction">
    </member>
    <member name="M:Utility.clsDatabase.DBTransaction.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:Utility.clsDatabase.DBTransaction">DBTransaction</see> class.</summary>
      <param name="ConnectionString">
</param>
    </member>
    <member name="M:Utility.clsDatabase.DBTransaction.Commit">
    </member>
    <member name="M:Utility.clsDatabase.DBTransaction.Rollback">
    </member>
    <member name="M:Utility.clsDatabase.DBTransaction.Execute(System.String)">
      <param name="sql">
</param>
    </member>
    <member name="T:Utility.clsFormatting">
      <summary>
General library for formatting routines.</summary>
    </member>
    <member name="M:Utility.clsFormatting.q(System.Object)">
      <summary>
Prepare a variable for inclusion in a SQL string.</summary>
      <remarks>
Use for formatting variables in SQL statements. This also filters against SQL injection attacks.</remarks>
      <returns>
A string formatted for inclusion in a SQL query.</returns>
      <param name="Fld">
Text to prepare.</param>
    </member>
    <member name="M:Utility.clsFormatting.GetAge(System.DateTime)">
      <summary>
Get the age of a person.</summary>
      <returns>
The age in years.</returns>
      <param name="BirthDate">
The birthdate of the person.</param>
    </member>
    <member name="M:Utility.clsFormatting.GetFirstDayInMonth(System.DateTime)">
      <summary>
Get the date of the first day in a month.</summary>
      <returns>
The date of the first day of the month.</returns>
      <param name="dtDate">
Any date in the month to return.</param>
    </member>
    <member name="M:Utility.clsFormatting.GetLastDayInMonth(System.DateTime)">
      <summary>
Get the date of the last day in a month.</summary>
      <returns>
The date of the last day of the month.</returns>
      <param name="dtDate">
Any date in the month to return.</param>
    </member>
    <member name="M:Utility.clsFormatting.GetStartOfDay(System.DateTime)">
      <summary>
Set the time for a date to the start of day.</summary>
      <returns>
The same date at 12:00 am.</returns>
      <param name="dtDate">
Any date for which to set the time.</param>
    </member>
    <member name="M:Utility.clsFormatting.GetEndOfDay(System.DateTime)">
      <summary>
Set the time for a date to the end of day.</summary>
      <returns>
The same date at 11:59 pm.</returns>
      <param name="dtDate">
Any date for which to set the time.</param>
    </member>
    <member name="M:Utility.clsFormatting.GetTextBetween(System.String,System.String,System.String)">
      <summary>
Get the text in a string between two fragments.</summary>
      <returns>
Inner string.</returns>
      <param name="Full">
The string to parse.</param>
      <param name="FromPart">
The start fragment.</param>
      <param name="ToPart">
The end fragment.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToBoolean(System.Object)">
      <summary>
Safely returns a boolean from a bit field.</summary>
      <returns>
A valid boolean.</returns>
      <param name="BitField">
Bit field to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToStr(System.Object)">
      <summary>
Safely returns a string even if str is Nothing.</summary>
      <returns>
A valid string.</returns>
      <param name="str">
str to prepare.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToURL(System.String)">
      <summary>
Prepare a URL string.</summary>
      <remarks>
Use to encode special characters for URL.</remarks>
      <returns>
A valid URL.</returns>
      <param name="URL">
URL to prepare.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToXML(System.String)">
      <summary>
Prepare an XML string.</summary>
      <remarks>
Use to encode special characters for XML.</remarks>
      <returns>
A valid XML string.</returns>
      <param name="XML">
XML string to prepare.</param>
    </member>
    <member name="M:Utility.clsFormatting.FromXML(System.String)">
      <summary>
Decode an XML string.</summary>
      <remarks>
Use to decode special characters in XML.</remarks>
      <returns>
A valid text string.</returns>
      <param name="XML">
XML string to decode.</param>
    </member>
    <member name="M:Utility.clsFormatting.FromMhsDate(System.Object)">
      <summary>
Convert an MHS date to standard format.</summary>
      <returns>
Formatted date.</returns>
      <param name="MHSDate">
Date to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToSSN(System.String)">
      <summary>
Convert a SSN to standard format.</summary>
      <returns>
Formatted SSN.</returns>
      <param name="SSN">
SSN to format.</param>
    </member>
    <member name="M:Utility.clsFormatting.AssemblePhone(System.String,System.String,System.String)">
      <summary>
Create a phone number string from component parts.</summary>
      <returns>
Formatted phone number.</returns>
      <param name="ph1">
Area code.</param>
      <param name="ph2">
Exchange.</param>
      <param name="ph3">
Number.</param>
    </member>
    <member name="M:Utility.clsFormatting.IsAddressSame(System.String,System.String)">
      <summary>
Check if two street addresses match.</summary>
      <remarks>
Should be street address only, without city, state, and zip.</remarks>
      <returns>
True if the addresses are the same.</returns>
      <param name="addr1">
The first street address.</param>
      <param name="addr2">
The second street address.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToZip(System.String)">
      <summary>
Convert a Zip Code to standard format.</summary>
      <remarks>
Handles Zip+4 format.</remarks>
      <returns>
Formatted zip code.</returns>
      <param name="zip">
Zip to format.</param>
    </member>
    <member name="M:Utility.clsFormatting.IsZip(System.String)">
      <summary>
Validates a Zip Code to standard format.</summary>
      <remarks>
Validates that the code can be formatted as a zip code. Use ToZip to ensure proper formatting.</remarks>
      <returns>
True if valid (zip has 5 or 9 numeric characters with an optional hyphen).</returns>
      <param name="zip">
Zip to validate.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToPhone(System.String)">
      <summary>
Convert a phone number to standard format.</summary>
      <returns>
Formatted phone Number.</returns>
      <param name="Phone">
Phone number to format.</param>
    </member>
    <member name="M:Utility.clsFormatting.IsPhone(System.String,System.Boolean)">
      <summary>
Verify that a string is formattable to a 10 digit phone number.</summary>
      <returns>
True if the string is a 10 digit number.</returns>
      <param name="Phone">
Phone number to verify.</param>
      <param name="Allow7">
The default value is False
.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToNumericCharsOnly(System.String,System.Boolean,System.Boolean)">
      <summary>
Strips a string of any non-numeric characters.</summary>
      <returns>
Stripped text string.</returns>
      <param name="Text">
Text string to format.</param>
      <param name="DecimalAllowed">
The default value is False
.</param>
      <param name="NegativeAllowed">
The default value is False
.</param>
    </member>
    <member name="M:Utility.clsFormatting.StripWhiteSpace(System.Object)">
      <summary>
Strips a string of any white space.</summary>
      <returns>
Stripped text string.</returns>
      <param name="Text">
Text string to format.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToDecimalPlaces(System.Object,System.Int32)">
      <summary>
Truncates the decimal places.</summary>
      <returns>
A number string.</returns>
      <param name="Number">
Number object to format.</param>
      <param name="DecimalPlaces">
The default value is 0
.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToAddress(System.String,System.String,System.String,System.String,System.String)">
      <summary>
Create an address string from component parts.</summary>
      <returns>
A formatted address.</returns>
      <param name="ad1">
Address Line 1.</param>
      <param name="ad2">
Address Line 2.</param>
      <param name="city">
City.</param>
      <param name="state">
State abbreviation.</param>
      <param name="zip">
Zip Code.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToFullName(System.String,System.String,System.String,System.String)">
      <summary>
Create a full name string from component parts.</summary>
      <returns>
A full name string.</returns>
      <param name="FirstName">
First Name.</param>
      <param name="MiddleName">
Middle Name.</param>
      <param name="LastName">
Last Name.</param>
      <param name="Title">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToMhsDate(System.DateTime)">
      <summary>
Convert a date to MHS format.</summary>
      <remarks>
If not provided, d defaults to Now.</remarks>
      <returns>
An MHS format date.</returns>
      <param name="d">
The DateTime to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToTime(System.String)">
      <summary>
Make sure a time string is formatted properly.</summary>
      <returns>
A properly formatted time string.</returns>
      <param name="TimeString">
The time string to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToStdTime(System.String)">
      <summary>
Convert a military time to standard am/pm format.</summary>
      <returns>
A properly formatted standard time string.</returns>
      <param name="MilitaryTime">
The miltiary time string to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToGender(System.String)">
      <summary>
Return the friendly form for a gender abbreviation.</summary>
      <returns>
The full gender description string.</returns>
      <param name="sText">
The gender abbreviation to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.ZipFromAddr(System.String)">
      <summary>
Extract a zip code from an address.</summary>
      <returns>
The parsed zip code, if any.</returns>
      <param name="AddrString">
The address string containing a zip code.</param>
    </member>
    <member name="M:Utility.clsFormatting.Quote(System.String)">
      <summary>
Put double quotes around a string.</summary>
      <param name="strText">
String to quote.</param>
    </member>
    <member name="M:Utility.clsFormatting.Scramble(System.String)">
      <summary>
Scramble characters to protect the text.</summary>
      <param name="RawText">
String to scramble.</param>
    </member>
    <member name="M:Utility.clsFormatting.AppendIfNeeded(System.String,System.String)">
      <summary>
Append a string with another string if it is not already there.</summary>
      <remarks>
Comparison is case insensitive.</remarks>
      <param name="sText">
The text string to be appended.</param>
      <param name="sAppend">
The text string to append.</param>
    </member>
    <member name="M:Utility.clsFormatting.ReplaceFirst(System.String,System.String,System.String)">
      <summary>
Replace the first occurrence only of a substring.</summary>
      <remarks>
If sSearch is not found, returns original string.</remarks>
      <param name="sText">
The text string to be appended.</param>
      <param name="sSearch">
The text string to search for.</param>
      <param name="sReplace">
The text string to replace it with.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToTitle(System.String)">
      <summary>
Convert a string to Title Case.</summary>
      <param name="sText">
The text to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToCurrency(System.String)">
      <summary>
Convert a string to currency.</summary>
      <param name="sText">
The text to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.ToPercent(System.String)">
      <summary>
Convert a string to percent.</summary>
      <param name="sText">
The text to convert.</param>
    </member>
    <member name="M:Utility.clsFormatting.Compress(System.String)">
      <summary>
Compress a string.</summary>
      <remarks>
Might increase the length of very short strings.</remarks>
      <returns>
The compressed string.</returns>
      <seealso cref="M:Utility.clsFormatting.Decompress(System.String)">
Decompress</seealso>
      <param name="OriginalText">
The text to compress.</param>
    </member>
    <member name="M:Utility.clsFormatting.Decompress(System.String)">
      <summary>
Decompress a string.</summary>
      <returns>
The uncompressed string.</returns>
      <seealso cref="M:Utility.clsFormatting.Compress(System.String)">
Compress</seealso>
      <param name="CompressedText">
The compressed text string to decompress.</param>
    </member>
    <member name="M:Utility.clsFormatting.GetAttribute(System.Xml.XmlNode,System.String,System.Object)">
      <summary>
Get a node attribute.</summary>
      <returns>
The value of the specified attribute.</returns>
      <param name="n">
The XML Node containing the attribute.</param>
      <param name="Attribute">
The name of the attribute to get.</param>
      <param name="DefaultValue">
An optional default value if no attribute is found.</param>
    </member>
    <member name="M:Utility.clsFormatting.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
      <summary>
Set a node attribute.</summary>
      <param name="n">
The XML Node containing the attribute.</param>
      <param name="Attribute">
The name of the attribute to set.</param>
      <param name="Value">
The value of the attribute to set.</param>
    </member>
    <member name="M:Utility.clsFormatting.ApplyXSLT(System.String,System.String)">
      <summary>
Apply an XSLT transform string to an HTML/XML string.</summary>
      <returns>
The transformed document.</returns>
      <param name="document">
The XML or HTML document to transform.</param>
      <param name="stylesheet">
The XSLT stylesheet to apply.</param>
    </member>
    <member name="T:Utility.clsFormatting.Encrypter">
      <summary>
Encrypt or Unencrypt a text string.</summary>
    </member>
    <member name="M:Utility.clsFormatting.Encrypter.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="T:Utility.clsFormatting.Encrypter">Encrypter</see> class.</summary>
      <param name="EncryptionKey">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.clsFormatting.Encrypter.Encrypt(System.String)">
      <summary>
Encrypt a string.</summary>
      <returns>
An encrypted byte array.</returns>
      <seealso cref="M:Utility.clsFormatting.Encrypter.Decrypt(System.Byte[])">
Decrypt</seealso>
      <param name="plainText">
</param>
    </member>
    <member name="M:Utility.clsFormatting.Encrypter.Decrypt(System.Byte[])">
      <summary>
Decrypt a byte array.</summary>
      <returns>
An unencrypted string.</returns>
      <seealso cref="M:Utility.clsFormatting.Encrypter.Encrypt(System.String)">
Encrypt</seealso>
      <param name="inputInBytes">
</param>
    </member>
    <member name="T:Utility.clsDataQuery">
      <summary>
Database Query Class Features: SQL Server, ODBC, and OLEDB Provider Types Execute, GetValue, GetIdentity, and GetTable Query Types All methods support Ad Hoc, Parameterized, and Stored Procedure calls GetTable Queries with or without Schema Mapping Synchronous or Asynchronous with Notification Event Returns formatted sql for debugging parameterized queries Sequential Transaction Support (not simultaneous) Configurable Timeout Automatic timing of all queries Logs recent query history internally Optional query logging to database</summary>
    </member>
    <member name="M:Utility.clsDataQuery.#ctor(System.String,Utility.clsDataQuery.ProviderTypes,System.String)">
      <summary>
Instantiate a new DataQuery object</summary>
      <param name="Connection">
The connection string</param>
      <param name="Provider">
The default value is ProviderTypes.SQLServer
.</param>
      <param name="sql">
The default value is ""
.</param>
    </member>
    <member name="M:Utility.clsDataQuery.ParamSet(System.String,System.Object,System.Boolean)">
      <summary>
Create or assign a new parameter value</summary>
      <param name="Name">
The name of the parameter to add, e.g. @ID</param>
      <param name="Value">
The value of the specified parameter</param>
      <param name="ClearPrevious">
The default value is False
.</param>
    </member>
    <member name="M:Utility.clsDataQuery.ParamsClear">
      <summary>
Clear any defined parameters</summary>
    </member>
    <member name="M:Utility.clsDataQuery.IsConnectionValid">
      <summary>
Verify the connection can be opened.</summary>
      <returns>
OK or an error message.</returns>
    </member>
    <member name="M:Utility.clsDataQuery.GetCurrentDatabase">
      <summary>
Get default database for current connection string.</summary>
      <returns>
The database name.</returns>
    </member>
    <member name="M:Utility.clsDataQuery.GetCurrentProvider">
      <summary>
Get default provider for current connection string.</summary>
      <returns>
The provider name.</returns>
    </member>
    <member name="M:Utility.clsDataQuery.Execute(System.String)">
      <summary>
Execute an action query</summary>
      <returns>
The count of records affected</returns>
      <param name="sql">
The sql action query to execute</param>
    </member>
    <member name="M:Utility.clsDataQuery.GetValue(System.String)">
      <summary>
Return a single value</summary>
      <returns>
Returns the first row and field in the resultset</returns>
      <param name="sql">
The sql string to return</param>
    </member>
    <member name="M:Utility.clsDataQuery.GetIdentity(System.String)">
      <summary>
Return an Identity value from SQL Server</summary>
      <remarks>
SQL Server Only</remarks>
      <returns>
Returns the row Identity after an Insert or Update</returns>
      <param name="sql">
The sql string to insert or update</param>
    </member>
    <member name="M:Utility.clsDataQuery.GetIdentity">
      <summary>
Return an Identity value from SQL Server</summary>
      <remarks>
SQL Server Only</remarks>
      <returns>
Returns the row Identity after an Insert or Update</returns>
    </member>
    <member name="M:Utility.clsDataQuery.GetTable(System.String,System.String,System.Boolean)">
      <summary>
Return a data table (with schema mapping)</summary>
      <returns>
A datatable</returns>
      <param name="TableName">
The name to assign to the returned datatable</param>
      <param name="sql">
The sql string to return</param>
      <param name="IncludeSchema">
Set to False if you do not wish to return the table schema mapping</param>
    </member>
    <member name="M:Utility.clsDataQuery.GetTableNoSchema">
      <summary>
Return a data table (without schema mapping)</summary>
      <remarks>
Table is given the name specified in the Tag property if a string</remarks>
      <returns>
A datatable</returns>
    </member>
    <member name="M:Utility.clsDataQuery.TransactionBegin">
      <summary>
Initiate a new transaction</summary>
      <remarks>
Applies to Execute, GetValue, and GetIdentity methods</remarks>
    </member>
    <member name="M:Utility.clsDataQuery.TransactionRollback">
      <summary>
Abort the current transaction</summary>
    </member>
    <member name="M:Utility.clsDataQuery.TransactionCommit">
      <summary>
Commit the current transaction</summary>
    </member>
    <member name="E:Utility.clsDataQuery.Finished">
      <summary>
Occurs when .</summary>
      <param name="Sender">
</param>
      <param name="QueryType">
</param>
    </member>
    <member name="M:Utility.clsDataQuery.ExecuteAsync">
      <summary>
Execute an action query asynchronously</summary>
      <remarks>
Implement the Finished event if you wish to be notified of completion</remarks>
    </member>
    <member name="M:Utility.clsDataQuery.GetValueAsync">
      <summary>
Execute a GetValue query asynchronously and populate LastQueryValue with the result</summary>
      <remarks>
Implement the Finished event if you wish to be notified of completion</remarks>
    </member>
    <member name="M:Utility.clsDataQuery.GetIdentityAsync">
      <summary>
Execute a GetIdentity query asynchronously and populate LastQueryIdentity with the result</summary>
      <remarks>
Implement the Finished event if you wish to be notified of completion</remarks>
    </member>
    <member name="M:Utility.clsDataQuery.GetTableAsync">
      <summary>
Execute a GetTable query asynchronously and populate LastQueryTable with the result</summary>
      <remarks>
Implement the Finished event if you wish to be notified of completion</remarks>
    </member>
    <member name="M:Utility.clsDataQuery.GetTableNoSchemaAsync">
      <summary>
Execute a GetTableNoSchema query asynchronously and populate LastQueryTable with the result</summary>
      <remarks>
Implement the Finished event if you wish to be notified of completion</remarks>
    </member>
    <member name="M:Utility.clsDataQuery.Raise(System.Delegate,System.Object[])">
      <param name="event">
</param>
      <param name="data">
</param>
    </member>
    <member name="P:Utility.clsDataQuery.sqlComplete">
      <summary>
Return an executable sql statement with any parameter values substituted</summary>
    </member>
    <member name="P:Utility.clsDataQuery.LastQueryIdentity">
      <summary>
The last Identity returned from GetIdentity</summary>
    </member>
    <member name="P:Utility.clsDataQuery.LastQueryTable">
      <summary>
The last datatable returned from GetTable</summary>
    </member>
    <member name="P:Utility.clsDataQuery.LastQueryTime">
      <summary>
Returns the timespan of the last query in milliseconds</summary>
    </member>
    <member name="P:Utility.clsDataQuery.LastQueryType">
      <summary>
The current provider type, defaults to SQL Server</summary>
    </member>
    <member name="P:Utility.clsDataQuery.LastQueryValue">
      <summary>
Returns the last value returned from GetValue</summary>
    </member>
    <member name="N:Utility">
    </member>
  </members>
</doc>
